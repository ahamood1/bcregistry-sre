name: Backend Application CI

on:
  workflow_call:
    inputs:
      app_name:
        required: true
        type: string
      working_directory:
        type: string
        default: "."
      codecov_flag:
        type: string

jobs:
  linting:
    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-latest" ]

    runs-on: ${{ matrix.os }}

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ${{ inputs.working_directory }}/pyproject.toml
          cache: poetry
          cache-dependency-path: ${{ inputs.working_directory }}/poetry.lock
      - name: Install dependencies
        run: poetry install
      #----------------------------------------------
      #          install and run linters
      #----------------------------------------------
      - name: Run isort
        run: |
          poetry run isort . --check
      - name: Run black
        run: |
          poetry run black . --check
      - name: Run pylint
        run: |
          poetry run pylint .
      - name: Run flake8
        run: |
          poetry run flake8 .

  unit-testing:
    needs: linting

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    strategy:
      fail-fast: true
      matrix:
        os: [ "ubuntu-latest" ]

    env:
      DATABASE_TEST_USERNAME: "postgres"
      DATABASE_TEST_PASSWORD: "postgres"
      DATABASE_TEST_NAME: "postgres"
      DATABASE_TEST_HOST: "localhost"
      DATABASE_TEST_PORT: "5432"

    services:
      postgres:
        image: postgres:15
        env:
          POSTGRES_USER: postgres
          POSTGRES_PASSWORD: postgres
          POSTGRES_DB: postgres
        ports:
          - 5432:5432
        # needed because the postgres container does not provide a healthcheck
        options: --health-cmd pg_isready --health-interval 10s --health-timeout 5s --health-retries 5

    runs-on: ${{ matrix.os }}
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: Install Poetry
        run: |
          pipx install poetry
      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version-file: ${{ inputs.working_directory }}/pyproject.toml
          cache: poetry
          cache-dependency-path: ${{ inputs.working_directory }}/poetry.lock
      - name: Install dependencies
        run: poetry install
      #----------------------------------------------
      #    add matrix specifics and run test suite
      #----------------------------------------------
      - name: Run tests
        run: |
          poetry run pytest

      - name: Upload coverage to Codecov
        uses: codecov/codecov-action@v4
        with:
          file: ${{ inputs.working_directory }}/coverage.xml
          flags: ${{ inputs.codecov_flag }}
          name: codecov-${{ inputs.app_name }}
          fail_ci_if_error: true

  verify-build:
    needs: linting

    defaults:
      run:
        shell: bash
        working-directory: ${{ inputs.working_directory }}

    runs-on: ubuntu-latest
    steps:
      #----------------------------------------------
      #       check-out repo and set-up python
      #----------------------------------------------
      - name: Check out repository
        uses: actions/checkout@v4
      - name: build to check strictness
        id: build
        run: |
          docker build --no-cache -t ${{ inputs.app_name }} .
