steps:

# Step 0: Redeploy the job with the updated environment variables.
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  secretEnv: ['OP_CONNECT_HOST', 'OP_CONNECT_TOKEN']
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    # Redeploy job if flag is set
    if [[ "${_REDEPLOY:-false}" == "true" ]]; then
        echo "üîÑ Step 0: Redeploying job with updated environment variables..."

        # Fetch project ID from 1Password
        PROJECT_ID=$(op read -n "op://CD/${_DEPLOYMENT_ENV}/${_APP_NAME}/DEPLOY_PROJECT_ID") || {
            echo "‚ùå Error: Failed to retrieve project ID." >&2
            exit 1
        }
        echo "$PROJECT_ID" > /workspace/project_id.txt

        # Set environment variable
        export APP_ENV="${_DEPLOYMENT_ENV}"

        # Generate secrets file
        if ! op inject -f -i ./devops/vaults.gcp.env -o ./devops/vaults."${_DEPLOYMENT_ENV}"; then
            echo "‚ùå Error: Failed to generate secrets via 1Password vault." >&2
            exit 1
        fi

        # Convert .env file to comma-separated key-value pairs
        VAL=$(awk -F= '{
            key=$1;
            value=substr($0, index($0, "=") + 1);
            gsub(/"/, "", value);
            printf "%s=%s,", key, value
        }' "./devops/vaults.${_DEPLOYMENT_ENV}" | sed 's/,$//')

        if [[ -z "$VAL" ]]; then
            echo "‚ö†Ô∏è Warning: Environment variables are empty. Skipping deployment." >&2
            exit 1
        fi

        # Update environment variables on Cloud Run Job
        echo "üöÄ Updating environment variables for ${_APP_NAME}-${_DEPLOYMENT_ENV} in project ${PROJECT_ID}."
        gcloud run jobs update "${_APP_NAME}-${_DEPLOYMENT_ENV}" \
            --region="${_REGION}" \
            --project="${PROJECT_ID}" \
            --update-env-vars="${VAL}"

        echo "üèÅ ${_DEPLOYMENT_ENV} redeployment finalized successfully."

        exit 0
    fi

# Step 1: Prepare and setup job and cloud deploy manifest files
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  secretEnv: ['OP_CONNECT_HOST', 'OP_CONNECT_TOKEN']
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    if [[ "${_REDEPLOY:-false}" != "true" ]]; then
      echo "üîÑ Step 1: Preparing and setting up service and Cloud Deploy manifest files..."

      # Fetch project ID and set up project variables
      PROJECT_ID=$(op read -n "op://CD/${_DEPLOYMENT_ENV}/${_APP_NAME}/DEPLOY_PROJECT_ID") || {
          echo "‚ùå Error: Failed to retrieve project ID." >&2
          exit 1
      }
      echo "$PROJECT_ID" > /workspace/project_id.txt
      PROJECT_NAME="${PROJECT_ID%%-*}"

      # Generate job manifest for each environment
      generate_job_manifest() {
        local env_name=$1
        export APP_ENV=${env_name}

        echo "üõ†Ô∏è Generating job manifest for environment: ${env_name}..."

        # Generate secrets from 1Password
        if ! op inject -f -i ./devops/vaults.gcp.env -o "./devops/vaults.${env_name}"; then
            echo "‚ùå Error: Failed to generate secrets for ${env_name}." >&2
            exit 1
        fi

        # Extract VPC connector and environment variables
        export VPC_CONNECTOR=$(awk -F '=' '/^VPC_CONNECTOR/ {print $2}' "./devops/vaults.${env_name}")
        export VAL=$(awk '{f1=f2=$0; sub(/=.*/,"",f1); sub(/[^=]+=/,"",f2); printf "- name: %s\n  value: %s\n",f1,f2}' "./devops/vaults.${env_name}")

        # Generate manifest with or without VPC connector
        local template_file="./devops/gcp/k8s/job.template.yaml"
        local temp_file="./devops/gcp/k8s/temp-job.${env_name}.yaml"
        local output_file="./devops/gcp/k8s/job.${env_name}.yaml"

        cp "$template_file" "$temp_file"

        if [[ -n "$VPC_CONNECTOR" ]]; then
            echo "üåê Adding VPC connector configuration..."
            yq e '.spec.template.metadata.annotations += {"run.googleapis.com/vpc-access-egress": "private-ranges-only", "run.googleapis.com/vpc-access-connector": env(VPC_CONNECTOR)}' -i "$temp_file"
        fi

        yq e '.spec.template.spec.template.spec.containers[0].env += env(VAL)' -i "$temp_file"
        mv "$temp_file" "$output_file"
      }

      # Remove unused targets from Cloud Deploy manifest
      remove_unused_deployments() {
          local -a targets_full=(${_DEPLOY_FULL_DEPLOYMENT_ENVS})
          local -a targets_current=(${_DEPLOYMENT_ENVS})

          # Calculate environments to remove
          local -a to_remove
          mapfile -t to_remove < <(comm -23 <(printf "%s\n" "${targets_full[@]}" | sort) <(printf "%s\n" "${targets_current[@]}" | sort))

          for env_name in "${to_remove[@]}"; do
              export TARGET="${PROJECT_NAME}-${env_name}"
              echo "üßπ Removing unused deployment target: ${TARGET}"
              yq e 'del(.serialPipeline.stages[] | select(.targetId == env(TARGET)))' -i "./devops/gcp/clouddeploy.yaml"
          done
      }

      # Update Cloud Deploy manifest and generate manifests if needed
      targets=(${_DEPLOYMENT_ENVS})
      if [[ -z "${_DEPLOYMENT_ENV_FROM:-}" || "${_DEPLOYMENT_ENV}" == "${targets[0]}" ]]; then
          echo "üõ†Ô∏è Updating Cloud Deploy manifest for pipeline: ${_DEPLOYMENT_PIPELINE}"
          yq e '.metadata.name = env(_DEPLOYMENT_PIPELINE)' -i "./devops/gcp/clouddeploy.yaml"

          for env_name in "${targets[@]}"; do
              generate_job_manifest "$env_name"
          done

          remove_unused_deployments
      fi

      # Apply Cloud Deploy configuration
      echo "üöÄ Applying Cloud Deploy configuration..."
      gcloud deploy apply --file=./devops/gcp/clouddeploy.yaml \
          --region="${_REGION}" \
          --project="${_BUILD_PROJECT}"
    fi

# Step 2: Build and deploy the job
- name: 'gcr.io/google.com/cloudsdktool/cloud-sdk:522.0.0'
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    if [[ "${_REDEPLOY:-false}" != "true" ]]; then
      echo "üöÄ Step 2: Build and deploy the job"

      # Set up environment variables
      PROJECT_ID=$(cat /workspace/project_id.txt)
      PROJECT_NAME="${PROJECT_ID%%-*}"
      TAG_SHA="${_SHORT_SHA}"
      TARGET="${PROJECT_NAME}-${_DEPLOYMENT_ENV}"
      TARGET_FROM="${PROJECT_NAME}-${_DEPLOYMENT_ENV_FROM}"
      IMAGE_PATH="${_REGION}-docker.pkg.dev/${_BUILD_PROJECT}/cloud-run-repo/${_APP_NAME}"
      IMAGE_PACKAGE_PATH="projects/${_BUILD_PROJECT}/locations/${_REGION}/repositories/cloud-run-repo/packages/${_APP_NAME}"

      # üß© Function to check if a Docker tag exists
      tag_exists() {
        local tag="$1"
        gcloud artifacts docker tags list "${IMAGE_PATH}" \
          --filter="tag=${IMAGE_PACKAGE_PATH}/tags/${tag}" \
          --format="value(tag)" 2>/dev/null | grep -q .
      }

      # üß© Function to get SHA tag associated with an environment tag
      tag_sha() {
        local tag="$1"

        # Get the version corresponding to the given tag
        local version
        version=$(gcloud artifacts docker tags list "${IMAGE_PATH}" \
          --filter="tag=${IMAGE_PACKAGE_PATH}/tags/${tag}" \
          --format="value(version)" 2>/dev/null)

        # Get sha tag associated with the version, excluding environment tags and latest tag
        gcloud artifacts docker tags list "${IMAGE_PATH}" \
          --filter="version=${IMAGE_PACKAGE_PATH}/versions/${version} AND -tag:(latest ${_DEPLOY_FULL_DEPLOYMENT_ENVS})" \
          --format="value(tag)" 2>/dev/null
      }

      # üîñ Function to tag a Docker image
      tag_image() {
        local source_tag="$1" target_tag="$2"
        echo "üè∑Ô∏è Tagging image: ${source_tag} ‚Üí ${target_tag}"
        gcloud artifacts docker tags add "${IMAGE_PATH}:${source_tag}" "${IMAGE_PATH}:${target_tag}"
      }

      # üõ†Ô∏è Function to build and push Docker image
      build_and_push_image() {
        local target_tag="$1"
        local short_sha="$2"
        if ! tag_exists "${short_sha}"; then
          echo "üî® Building and pushing Docker image: ${short_sha}"
          gcloud --version
          docker --version
          docker build -t "${IMAGE_PATH}:${short_sha}" --cache-from "${IMAGE_PATH}:latest" .
          docker push "${IMAGE_PATH}:${short_sha}"
          tag_image "${short_sha}" "latest"
        else
          echo "‚úÖ Image ${IMAGE_PATH}:${short_sha} already exists. Skipping build." >&2
        fi
        tag_image "${short_sha}" "${target_tag}"
      }

      # üîç Handle image building and tagging based on environment
      case ${_DEPLOYMENT_ENV} in
        "dev"|"test"|"uat"|"sandbox"|"prod")
          [[ "${_DEPLOYMENT_ENV}" == "prod" && $(tag_exists "prod") ]] && tag_image "prod" "prod-$(date +%F)"

          if [ -z "${_DEPLOYMENT_ENV_FROM}" ] || [ "${_DEPLOYMENT_ENV_FROM}" = "${_DEPLOYMENT_ENV}" ]; then
            build_and_push_image "${_DEPLOYMENT_ENV}" "${_SHORT_SHA}"
          else
            tag_image "${_DEPLOYMENT_ENV_FROM}" "${_DEPLOYMENT_ENV}"
          fi

          # Get the SHA tag associated with the environment tag
          TAG_SHA=$(tag_sha "${_DEPLOYMENT_ENV}")
          ;;
        *)
          echo "‚ùå Invalid environment '${_DEPLOYMENT_ENV}'. Allowed: dev, test, uat, sandbox, prod." >&2
          exit 1
          ;;
      esac

      echo "üîç Image sha tag: ${TAG_SHA}"

      # üåê Navigate to deployment directory
      cd ./devops/gcp

      # üì¶ Prepare new release
      RELEASE_NAME="v-${TAG_SHA}-$(date '+%Y%m%d%H%M')"

      # üöÄ Create or promote release
      if [ -z "${_DEPLOYMENT_ENV_FROM}" ] || [ "${_DEPLOYMENT_ENV_FROM}" = "${_DEPLOYMENT_ENV}" ] || [[ "${_DEPLOYMENT_ENV}" =~ ^(uat|sandbox)$ ]]; then
        echo "üöÄ Create a new release."

        IMAGE_TAG="${TAG_SHA}"
        [[ "${_DEPLOYMENT_ENV}" =~ ^(uat|sandbox)$ ]] && IMAGE_TAG="${_DEPLOYMENT_ENV}"

        gcloud deploy releases create "${RELEASE_NAME}" \
          --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
          --region="${_REGION}" \
          --to-target="${TARGET}" \
          --images="image-placeholder=${IMAGE_PATH}:${IMAGE_TAG}"
      else
        RELEASE_NAME=$(gcloud deploy targets describe "${TARGET_FROM}" \
              --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
              --region="${_REGION}" \
              --format="value('Latest release')")

        echo "üöÄ Promote existing release ${RELEASE_NAME}."

        gcloud deploy releases promote --release="${RELEASE_NAME}" \
          --delivery-pipeline="${_DEPLOYMENT_PIPELINE}" \
          --region="${_REGION}" \
          --to-target="${TARGET}"
      fi

      RELEASE_NAME="${RELEASE_NAME##*/}"
      echo "üöÄ Release name: $PROJECT_ID $RELEASE_NAME"

      MAX_RETRIES=10
      RETRY_INTERVAL=30
      RETRY_COUNT=0

      while [ $RETRY_COUNT -lt $MAX_RETRIES ]; do
        if gcloud run jobs describe "${_APP_NAME}-${_DEPLOYMENT_ENV}" --region="${_REGION}" --project="$PROJECT_ID" --format="value(metadata.name)" 2> /dev/null ; then
          DEPLOY_RELEASE_NAME=$(gcloud run jobs describe "${_APP_NAME}-${_DEPLOYMENT_ENV}" --region="${_REGION}" --project="$PROJECT_ID" --format="value(metadata.labels.release-id)" 2> /dev/null)
          echo "üöÄ Deploy Release name: $DEPLOY_RELEASE_NAME"
          if [ "${DEPLOY_RELEASE_NAME}" = "${RELEASE_NAME}" ]; then
            echo "‚úÖ Release ${RELEASE_NAME} completed successfully."
            break
          fi
        fi
        echo "üîÑ Release ${RELEASE_NAME} is still in progress."
        RETRY_COUNT=$((RETRY_COUNT + 1))
        sleep $RETRY_INTERVAL
      done
    fi

# Step 3: handle multiple jobs and scheduler(s)
- name: 'northamerica-northeast1-docker.pkg.dev/c4hnrd-tools/cicd-repo/gcp-sre'
  script: |
    #!/usr/bin/env bash
    set -euo pipefail

    echo "üöÄ Step 3: handle multiple jobs and scheduler(s)"

    # Set environment variables
    PROJECT_ID=$(< /workspace/project_id.txt)

    validate_cron_expression() {
      local cron_expression="$1"
    
      # Skip lines that are comments
      [[ "$cron_expression" =~ ^[[:space:]]*# ]] && return 1
    
      return 0
    }

    # Create or update Cloud Schedulers
    create_schedulers() {
      local cronfile_name="$1" job_name="$2" job_project="$3"
      local cron_file="./schedules/${cronfile_name}.${_DEPLOYMENT_ENV}.cron"

      [[ ! -f "$cron_file" ]] && cron_file="./schedules/${cronfile_name}.cron"
      [[ ! -f "$cron_file" ]] && return  # Exit if no cron file exists

      # Remove existing schedulers
      gcloud scheduler jobs list --project="${job_project}" --location "${_REGION}" --format="value(name)" |
        grep "${job_name}-scheduler" |
        xargs -I {} gcloud scheduler jobs delete "{}" --quiet --project="${job_project}" --location "${_REGION}" || true

      # Create new schedulers
      mapfile -t cron_lines < "$cron_file"
      local schedule_id=0
      for line in "${cron_lines[@]}"; do
        echo "üóìÔ∏è Processing cron line: $line"
        if validate_cron_expression "$line"; then
          echo "‚úÖ Valid cron expression: $line"
          gcloud scheduler jobs create http "${job_name}-scheduler-trigger-$((++schedule_id))" \
            --project="${job_project}" --location="${_REGION}" --time-zone="America/Vancouver" --schedule="${line}" \
            --uri="https://${_REGION}-run.googleapis.com/apis/run.googleapis.com/v1/namespaces/${job_project}/jobs/${job_name}:run" \
            --http-method POST --oauth-service-account-email "sa-job@${job_project}.iam.gserviceaccount.com"
        fi
      done
    }

    # Handle multiple jobs
    if [[ -n "$(ls run_*.sh 2> /dev/null)" ]]; then
      echo "üöÄ Multiple jobs detected. Processing each job..."
      # Extract job configuration
      gcloud run jobs describe "${_APP_NAME}-${_DEPLOYMENT_ENV}" --format=yaml --project="${PROJECT_ID}" --region="${_REGION}" > ./devops/gcp/k8s/job.${_DEPLOYMENT_ENV}.yaml
      yq -i 'del(.status, .metadata.generation, .metadata.creationTimestamp, .metadata.namespace, .metadata.resourceVersion, .metadata.selfLink, .metadata.uid)' ./devops/gcp/k8s/job.${_DEPLOYMENT_ENV}.yaml

      # Iterate through job scripts and create/update jobs
      for file in run_*sh; do
        JOB_SCRIPT_NAME="${file##*/}"
        export JOB_NAME=$(echo ${_APP_NAME}-${_DEPLOYMENT_ENV}-${JOB_SCRIPT_NAME} | cut -d'.' -f 1 | tr "_" "-")
        export COMMAND="./${JOB_SCRIPT_NAME}"

        echo "üöÄ Processing job: ${JOB_NAME}"

        yq e '.metadata.name = env(JOB_NAME) | .spec.template.spec.template.spec.containers[0].command = env(COMMAND)' \
          ./devops/gcp/k8s/job.${_DEPLOYMENT_ENV}.yaml > ./devops/gcp/k8s/${JOB_NAME}.yaml

        # Create job if it doesn't exist
        if ! gcloud run jobs describe "${JOB_NAME}" --project="${PROJECT_ID}" --region="${_REGION}" &>/dev/null; then
          echo "üöÄ Creating your job..."
          IMAGE="${_REGION}-docker.pkg.dev/${_BUILD_PROJECT}/cloud-run-repo/${_APP_NAME}:${_DEPLOYMENT_ENV}"
          gcloud run jobs create "${JOB_NAME}" --project="${PROJECT_ID}" --region="${_REGION}" --image="${IMAGE}"
        fi

        # Update job
        gcloud run jobs replace ./devops/gcp/k8s/${JOB_NAME}.yaml --project="${PROJECT_ID}" --region="${_REGION}"
        create_schedulers "$(echo ${JOB_SCRIPT_NAME} | cut -d'.' -f 1 | tr "_" "-")" "${JOB_NAME}" "${PROJECT_ID}"
      done
    fi

    # Handle main scheduler
    if [[ -n "$(ls run.sh 2> /dev/null)" ]]; then
      echo "üöÄ Main job detected. Processing main job..."
      create_schedulers "run" "${_APP_NAME}-${_DEPLOYMENT_ENV}" "${PROJECT_ID}"
    fi

# Secret management
availableSecrets:
  secretManager:
  - versionName: projects/331250273634/secrets/OP_CONNECT_HOST/versions/latest
    env: 'OP_CONNECT_HOST'
  - versionName: projects/331250273634/secrets/OP_CONNECT_TOKEN/versions/latest
    env: 'OP_CONNECT_TOKEN'

# Build options and substitutions
options:
  automapSubstitutions: true
  substitutionOption: 'ALLOW_LOOSE'
substitutions:
  _APP_NAME: ${_APP_NAME}
  _SHORT_SHA: ${_SHORT_SHA}
  _DEPLOY_FULL_DEPLOYMENT_ENVS: "dev test uat sandbox prod"
  _DEPLOYMENT_ENVS: "dev test prod"
  _DEPLOYMENT_ENV: "dev"
  _DEPLOYMENT_ENV_FROM: "dev"
  _DEPLOYMENT_PIPELINE: ${_DEPLOYMENT_PIPELINE}
  _BUILD_PROJECT: "c4hnrd-tools"
  _REDEPLOY: "false"
  _REGION: "northamerica-northeast1"

logsBucket: 'gs://github-actions-cloudbuild/history'

timeout: 3600s
